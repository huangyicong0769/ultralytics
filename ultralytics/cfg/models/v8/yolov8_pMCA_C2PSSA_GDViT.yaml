# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 2048] # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  s: [0.33, 0.50, 2048] # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  m: [0.67, 0.75, 768] # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  l: [1.00, 1.00, 512] # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  x: [1.00, 1.25, 512] # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]] # 0-b1/2
  - [-1, 1, Conv, [128, 3, 2]] # 1-b2/4
  - [-1, 3, C2fAttn, [128, 'pMCA', True]]
  - [-1, 1, Conv, [256, 3, 2]] # 3-b3/8
  - [-1, 6, C2fAttn, [256, 'pMCA', True]]
  - [-1, 1, Conv, [512, 3, 2]] # 5-b4/16
  - [-1, 6, C2fAttn, [512, 'pMCA', True]]
  - [-1, 1, Conv, [1024, 3, 2]] # 7-b5/32
  - [-1, 3, C2fAttn, [1024, 'pMCA', True]]
  - [-1, 1, SPPF, [1024, 5]] # 9
  - [-1, 3, C2PSSA, [1024]] #10

# YOLOv8.0n head
head:
#Gather-and-Distribute Mechanism
  - [[10, 6, 4, 2], 1, LowFAM, []] #11
  - [-1, 1, LowIFM, [768, 3, 1]]
  - [-1, 1, Split, [512, 256]] #13 -> p4, p3

  - [[10, 6, 4], 1, LowLAF, [512]]
  - [[-1, 13], 1, Inject, [512, 0, 3, 'avgpool']] #15 p4

  - [[6, 4, 2], 1, LowLAF, [256]]
  - [[-1, 13], 1, Inject, [256, 1, 3, 'bilinear']] #17 p3(n3)

  - [10, 3, C2PSSA, [1024]] # 18 p5
  - [[-1, 15, 17], 1, HighFAM, []]
  - [-1, 1, HighIFM, [1536, 1, 1]]
  - [-1, 1, Split, [1024, 512]] # 21 -> N5, N4

  - [[18, 15], 1, HiLAF, [1024]]
  - [[-1, 21], 1, Inject, [1024, 0, 3, 'avgpool']] # 23 n5

  - [[15, 17], 1, HiLAF, [512]]
  - [[-1, 21], 1, Inject, [512, 1, 3, 'bilinear']] # 25 n4

  - [[18, 25, 23], 1, Detect, [nc]] # Detect(n3, n4, n5)
